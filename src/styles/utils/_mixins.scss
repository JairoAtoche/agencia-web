@use './variables' as var;

/**
 * Configura las propiedades comunes para fuentes tipográficas.
 * 
 * Este mixin establece el tamaño de la fuente, peso de la fuente, altura de línea, 
 * y márgenes superior e inferior para mejorar la consistencia en los estilos de texto.
 * 
 * @param {number} $size - Tamaño de fuente en píxeles.
 * @param {number} $weight - Peso de la fuente.
 * @param {number} $leading - Altura de línea en píxeles.
 * @param {number} $paragraph - Espaciado entre párrafos en píxeles.
 */
@mixin font_properties($size, $weight, $leading, $paragraph) {    
  font-size: $size;
  font-weight: $weight;
  line-height: $leading;
  margin: $paragraph auto;
}

/**
 * Aplica estilos condicionales basados en puntos de ruptura
 * y ajustar el tamaño de la fuente tipográfica en un punto de ruptura personalizado.
 *
 * @param {string} $breakpoint - El punto de ruptura en el que se aplicarán los estilos
 *   o se ajustará el tamaño de la fuente. Puede ser 'mobile', 'tablet', 'laptop' o 'custom'.
 */
@mixin responsive($breakpoint) {
  @if $breakpoint == mobile {
    @media (max-width: map-get(var.$breakpoints, tablet)) {
      @content;
    }
  }
  @else if $breakpoint == tablet {
    @media (min-width: map-get(var.$breakpoints, tablet)) and (max-width: map-get(var.$breakpoints, laptop)) {
      @content;
    }
  }
  @else if $breakpoint == laptop {
    @media (min-width: map-get(var.$breakpoints, laptop)) and (max-width: map-get(var.$breakpoints, desktop)) {
      @content;
    }
  }
  @else if $breakpoint == desktop {
    @media (min-width: map-get(var.$breakpoints, desktop)) {
      @content;
    }
  }
  @else if $breakpoint == large {
    @media (min-width: map-get(var.$breakpoints, laptop)) {
      @content;
    }
  }
  @else if $breakpoint == custom {
    @content;
  }
}

/**
 * Configura las propiedades flexbox en un elemento.
 * 
 * Este mixin establece las propiedades de CSS comunes de flexbox, como la dirección,
 * la alineación y el espacio entre elementos.
 * 
 * @param {string} $direction - Dirección de los elementos (ejemplo: row, column).
 * @param {string} $justify - Alineación horizontal de los elementos (ejemplo: flex-start, center).
 * @param {string} $align - Alineación vertical de los elementos (ejemplo: flex-start, stretch).
 * @param {string} $gap - Espacio entre elementos (valor en píxeles).
 */
@mixin flexbox($direction:row, $justify:flex-start, $align:flex-start, $gap:initial) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  gap: $gap;
}
